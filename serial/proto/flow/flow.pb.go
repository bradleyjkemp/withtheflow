// Code generated by protoc-gen-go.
// source: flow.proto
// DO NOT EDIT!

/*
Package flow is a generated protocol buffer package.

It is generated from these files:
	flow.proto

It has these top-level messages:
	FlowConfig
	BlockedFlow
	WorkflowState
*/
package flow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FlowConfig struct {
	Id             int64                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ParentId       int64                      `protobuf:"varint,2,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	DependentIds   []int64                    `protobuf:"varint,9,rep,packed,name=dependent_ids,json=dependentIds" json:"dependent_ids,omitempty"`
	DelayedResult  bool                       `protobuf:"varint,10,opt,name=DelayedResult" json:"DelayedResult,omitempty"`
	Name           string                     `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description    string                     `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Data           []byte                     `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Result         []byte                     `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`
	CreationTime   *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	CompletionTime *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=completion_time,json=completionTime" json:"completion_time,omitempty"`
}

func (m *FlowConfig) Reset()                    { *m = FlowConfig{} }
func (m *FlowConfig) String() string            { return proto.CompactTextString(m) }
func (*FlowConfig) ProtoMessage()               {}
func (*FlowConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FlowConfig) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FlowConfig) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *FlowConfig) GetDependentIds() []int64 {
	if m != nil {
		return m.DependentIds
	}
	return nil
}

func (m *FlowConfig) GetDelayedResult() bool {
	if m != nil {
		return m.DelayedResult
	}
	return false
}

func (m *FlowConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FlowConfig) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FlowConfig) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FlowConfig) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *FlowConfig) GetCreationTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *FlowConfig) GetCompletionTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CompletionTime
	}
	return nil
}

type BlockedFlow struct {
	BlockedId []int64     `protobuf:"varint,1,rep,packed,name=blocked_id,json=blockedId" json:"blocked_id,omitempty"`
	Flow      *FlowConfig `protobuf:"bytes,2,opt,name=flow" json:"flow,omitempty"`
}

func (m *BlockedFlow) Reset()                    { *m = BlockedFlow{} }
func (m *BlockedFlow) String() string            { return proto.CompactTextString(m) }
func (*BlockedFlow) ProtoMessage()               {}
func (*BlockedFlow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BlockedFlow) GetBlockedId() []int64 {
	if m != nil {
		return m.BlockedId
	}
	return nil
}

func (m *BlockedFlow) GetFlow() *FlowConfig {
	if m != nil {
		return m.Flow
	}
	return nil
}

type WorkflowState struct {
	Scheduled []*FlowConfig  `protobuf:"bytes,1,rep,name=scheduled" json:"scheduled,omitempty"`
	Blocked   []*BlockedFlow `protobuf:"bytes,2,rep,name=blocked" json:"blocked,omitempty"`
	Completed []*FlowConfig  `protobuf:"bytes,3,rep,name=completed" json:"completed,omitempty"`
}

func (m *WorkflowState) Reset()                    { *m = WorkflowState{} }
func (m *WorkflowState) String() string            { return proto.CompactTextString(m) }
func (*WorkflowState) ProtoMessage()               {}
func (*WorkflowState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *WorkflowState) GetScheduled() []*FlowConfig {
	if m != nil {
		return m.Scheduled
	}
	return nil
}

func (m *WorkflowState) GetBlocked() []*BlockedFlow {
	if m != nil {
		return m.Blocked
	}
	return nil
}

func (m *WorkflowState) GetCompleted() []*FlowConfig {
	if m != nil {
		return m.Completed
	}
	return nil
}

func init() {
	proto.RegisterType((*FlowConfig)(nil), "withtheflow.flow.FlowConfig")
	proto.RegisterType((*BlockedFlow)(nil), "withtheflow.flow.BlockedFlow")
	proto.RegisterType((*WorkflowState)(nil), "withtheflow.flow.WorkflowState")
}

func init() { proto.RegisterFile("flow.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0x95, 0xa4, 0x64, 0x9b, 0x49, 0xb3, 0x20, 0x1f, 0x90, 0xb5, 0xb0, 0x22, 0x2a, 0x1c,
	0x72, 0xca, 0xa2, 0xe5, 0x80, 0xc4, 0x05, 0x69, 0x8b, 0x90, 0x7a, 0x35, 0x48, 0x48, 0x1c, 0xa8,
	0xdc, 0x78, 0xda, 0x5a, 0x75, 0xe2, 0x28, 0x71, 0x55, 0xf1, 0x76, 0x3c, 0x10, 0x0f, 0x81, 0xec,
	0x24, 0x4d, 0x81, 0x43, 0xf7, 0x12, 0x79, 0xbe, 0x99, 0x7f, 0x26, 0xf3, 0x0f, 0xc0, 0x46, 0xe9,
	0x63, 0x5e, 0x37, 0xda, 0x68, 0xf2, 0xec, 0x28, 0xcd, 0xce, 0xec, 0xd0, 0x21, 0xfb, 0xb9, 0x79,
	0xb5, 0xd5, 0x7a, 0xab, 0xf0, 0xce, 0xe5, 0xd7, 0x87, 0xcd, 0x9d, 0x91, 0x25, 0xb6, 0x86, 0x97,
	0x75, 0x27, 0x99, 0xff, 0xf6, 0x01, 0x3e, 0x2b, 0x7d, 0x5c, 0xe8, 0x6a, 0x23, 0xb7, 0xe4, 0x1a,
	0x7c, 0x29, 0xa8, 0x97, 0x7a, 0x59, 0xc0, 0x7c, 0x29, 0xc8, 0x0b, 0x88, 0x6a, 0xde, 0x60, 0x65,
	0x56, 0x52, 0x50, 0xdf, 0xe1, 0x69, 0x07, 0x96, 0x82, 0xbc, 0x86, 0x44, 0x60, 0x8d, 0x95, 0xe8,
	0xf2, 0x2d, 0x8d, 0xd2, 0x20, 0x0b, 0xd8, 0xec, 0x04, 0x97, 0xa2, 0x25, 0x6f, 0x20, 0xf9, 0x84,
	0x8a, 0xff, 0x44, 0xc1, 0xb0, 0x3d, 0x28, 0x43, 0x21, 0xf5, 0xb2, 0x29, 0xfb, 0x1b, 0x12, 0x02,
	0x93, 0x8a, 0x97, 0x48, 0x83, 0xd4, 0xcb, 0x22, 0xe6, 0xde, 0x24, 0x85, 0x58, 0x60, 0x5b, 0x34,
	0xb2, 0x36, 0x52, 0x57, 0x74, 0xe2, 0x52, 0xe7, 0xc8, 0xaa, 0x04, 0x37, 0x9c, 0x3e, 0x49, 0xbd,
	0x6c, 0xc6, 0xdc, 0x9b, 0x3c, 0x87, 0xb0, 0xe9, 0x06, 0x85, 0x8e, 0xf6, 0x11, 0xf9, 0x08, 0x49,
	0xd1, 0x20, 0xb7, 0xba, 0x95, 0x35, 0x81, 0x5e, 0xa5, 0x5e, 0x16, 0xdf, 0xdf, 0xe4, 0x9d, 0x43,
	0xf9, 0xe0, 0x50, 0xfe, 0x75, 0x70, 0x88, 0xcd, 0x06, 0x81, 0x45, 0x64, 0x01, 0x4f, 0x0b, 0x5d,
	0xd6, 0x0a, 0xc7, 0x16, 0xd3, 0x8b, 0x2d, 0xae, 0x47, 0x89, 0x85, 0xf3, 0x1f, 0x10, 0x3f, 0x28,
	0x5d, 0xec, 0x51, 0x58, 0xd3, 0xc9, 0x2d, 0xc0, 0xba, 0x0b, 0x57, 0xce, 0x76, 0x6b, 0x5f, 0xd4,
	0x93, 0xa5, 0x20, 0x6f, 0x61, 0x62, 0xaf, 0xe8, 0x8c, 0x8f, 0xef, 0x5f, 0xe6, 0xff, 0x9e, 0x37,
	0x1f, 0x2f, 0xc7, 0x5c, 0xe5, 0xfc, 0x97, 0x07, 0xc9, 0x37, 0xdd, 0xec, 0x6d, 0xf0, 0xc5, 0x70,
	0x83, 0xe4, 0x03, 0x44, 0x6d, 0xb1, 0x43, 0x71, 0x50, 0xd8, 0x4d, 0xb8, 0xd4, 0x68, 0x2c, 0x27,
	0xef, 0xe1, 0xaa, 0xff, 0x19, 0xea, 0x3b, 0xe5, 0xed, 0xff, 0xca, 0xb3, 0x75, 0xd8, 0x50, 0x6d,
	0x87, 0xf6, 0x8b, 0xa3, 0xa0, 0xc1, 0x63, 0x86, 0x9e, 0xca, 0x1f, 0xc2, 0xef, 0x6e, 0x95, 0x75,
	0xe8, 0xec, 0x7c, 0xf7, 0x27, 0x00, 0x00, 0xff, 0xff, 0x55, 0x51, 0xfc, 0xc1, 0xe1, 0x02, 0x00,
	0x00,
}
